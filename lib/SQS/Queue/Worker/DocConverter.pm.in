package SQS::Queue::Worker::DocConverter;

use strict;
use warnings;

use Data::Dumper;
use English qw(no_match_vars);
use JSON;
use SQS::Queue::Constants qw(:all);

use Role::Tiny::With;

with 'DocConverter::Role::S3';
with 'DocConverter::Role::Helpers';

__PACKAGE__->follow_best_practice;
__PACKAGE__->mk_accessors(
  qw(
    benchmark
    bucket
    bucket_name
    conversion_time
    credentials
    document_id
  )
);

use parent qw(SQS::Queue::Worker);

########################################################################
sub handler {
########################################################################
  my ($self) = @_;

  my $s3_client = $self->get_s3_client // $self->init_s3_client;

  $self->parse_message;

  my $params = $self->get_message_params;

  $self->get_logger->info(
    Dumper(
      [ params => $params,
        body   => $self->get_body,
      ]
    )
  );

  my ( $bucket_name, $document_id, $action, $thumbnails )
    = @{$params}{qw(bucket_name document_id action thumbnails)};

  return $TRUE
    if $action eq 'wake-up';

  $bucket_name //= $self->get_bucket_name;

  $self->set_bucket_name($bucket_name);

  $self->set_bucket( $self->get_s3_client->bucket($bucket_name) );

  my $metadata = $self->fetch_metadata($document_id);

  my $result = $self->convert_document(
    document_id  => $document_id,
    pdf          => $action,
    thumbnails   => $thumbnails,
    content_type => $metadata->{content_type},
  );

  $metadata->{result} = $result;

  $self->put_object(
    prefix  => $document_id,
    name    => "${document_id}.json",
    content => to_json($metadata)
  );

  return $TRUE;
}

1;
