package DocConverter::Role::Helpers;

use strict;
use warnings;

use Carp;
use Data::Dumper;
use DocConverter::Constants;
use English qw(no_match_vars);
use File::Basename qw(basename fileparse dirname);
use File::Temp qw(tempfile tempdir);
use IPC::Run qw(run);
use JSON;
use MIME::Base64 qw(encode_base64);
use Time::HiRes qw(gettimeofday tv_interval);

use Role::Tiny;

use parent qw(Class::Accessor::Fast);

__PACKAGE__->follow_best_practice;
__PACKAGE__->mk_accessors(qw(last_command error error_code last_result));

########################################################################
sub pdfinfo {
########################################################################
  my ( $self, $file ) = @_;

  my @cmd = ( $PDFINFO, $file );

  $self->get_logger->debug( Dumper( [ command => \@cmd ] ) );

  my $out = $self->execute(@cmd);

  if ( $out =~ /Pages:\s+(\d+)/xsm ) {
    return $1;
  }

  return;
}

########################################################################
sub execute {
########################################################################
  my ( $self, @cmd ) = @_;

  $self->get_logger->debug( Dumper( [ cmd => \@cmd ] ) );

  my $out = $EMPTY;
  my $err = $EMPTY;

  $self->set_last_command( \@cmd );

  my $error_code = run( \@cmd, '>', \$out, '2>', \$err );

  if ($err) {
    $self->get_logger->error($err);
  }

  $self->set_error($err);

  $self->set_error_code($error_code);

  $self->set_last_result($out);

  return $out;
}

########################################################################
sub cvt2png {
########################################################################
  my ( $self, %args ) = @_;

  my ( $infile, $outfile, $page, $size ) = @args{qw(infile outfile page size)};

  my @cmd = ( sprintf '%s%s', $CONVERT, defined $page ? "[$page]" : $EMPTY );

  push @cmd, '-auto-orient', '-flatten',
    '-thumbnail'  => $size . '>',
    '-gravity'    => 'center',
    '-crop'       => $size . '+0+0!',
    '-background' => 'transparent',
    $infile,
    $outfile;

  return $self->execute(@cmd);
}

########################################################################
sub create_preview {
########################################################################
  my ( $self, %options ) = @_;

  my ( $w, $h ) = split /x/xsm, $options{size};

  my ( $name, $path, $ext ) = fileparse( $options{infile}, qr/[.][^.]*/xsm );
  $name ||= $ext;

  $options{outfile} = sprintf '%s%s-%s.png', $path, $name, $w;

  # attempt to create a .png from a .pdf
  $self->cvt2png(%options);

  # sometimes that does not work...so try to convert to ps first
  if ( !-s $options{outfile} ) {
    my ( undef, $tempfile ) = tempfile;

    my @cmd = (
      $PDFTOPS,
      '-f' => 1,
      '-l' => 1,
      $options{infile},
      $tempfile
    );

    $self->execute(@cmd);

    if ( -s $tempfile ) {
      $options{infile} = $tempfile;
      $self->cvt2png(%options);
    }

    if ( $tempfile && -s $tempfile ) {
      unlink $tempfile;
    }
  }

  return ( -s $options{outfile} ) ? $options{outfile} : ();
}

########################################################################
sub benchmark {
########################################################################
  my ( $self, $name ) = @_;

  if ( !$name ) {
    my $t0 = [gettimeofday];

    $self->set_benchmark(
      { t0 => $t0,
        t1 => $t0,
        t  => {},
      }
    );
    return;
  }

  my $benchmark = $self->get_benchmark;

  my ( $t, $t0, $t1 ) = @{$benchmark}{qw(t t0 t1)};

  $t->{elapsed_time} = tv_interval( $t0, [gettimeofday] );

  $t->{$name} += tv_interval( $t1, [gettimeofday] );

  $benchmark->{t1} = [gettimeofday];

  return;
}

########################################################################
sub doc2pdf {
########################################################################
  my ( $self, %args ) = @_;

  my ( $document_id, $outfile, $infile ) = @args{qw(document_id outfile infile)};

  my ( $err_name, $path, $ext ) = fileparse( $infile, qr/[.][^.]+$/xsm );

  my ($name) = fileparse( $infile, qr/[.][^.]+$/xsm );

  my ( $fh, $err_file ) = tempfile(
    sprintf( '%s-XXXX', $PID ),
    TMPDIR => $TRUE,
    SUFFIX => '.err'
  );

  # create PDF
  $self->execute( $DOC2PDF, $infile, $outfile );

  print {$fh} $self->get_error;

  close $fh;

  return { err_file => $err_file }
    if !-s $outfile;

  return {
    size  => ( -s "$outfile" ),
    name  => "$name.pdf",
    pages => $self->pdfinfo($outfile),
    s3    => sprintf( 's3://%s/%s/%s.pdf', $self->get_bucket_name, $document_id, $name ),
  };
}

########################################################################
sub fetch_document {
########################################################################
  my ( $self, $document_id ) = @_;

  my $list = $self->get_bucket->list( { prefix => $document_id } );

  croak sprintf "unable to list bucket for %s: %s\n", $document_id, $self->get_s3_client->errstr
    if !$list || !@{ $list->{keys} };

  my ($file) = grep {/${document_id}[.]dat/xsm} map { $_->{key} } @{ $list->{keys} };

  return $self->get_object( $document_id, $file );
}

########################################################################
sub convert_document {
########################################################################
  my ( $self, %args ) = @_;

  my ( $document_id, $pdf, $thumb, $content_type ) = @args{qw(document_id pdf thumb content_type)};

  $self->benchmark;

  my $infile = eval { return $self->fetch_document($document_id); };

  if ( !$infile || !-s $infile || $EVAL_ERROR ) {
    $self->get_logger->error(
      Dumper(
        [ error       => $EVAL_ERROR,
          size        => ( -s $infile ),
          document_id => $document_id,
        ]
      )
    );

    $self->write_status_file(
      $document_id,
      { document_id => $document_id,
        errstr      => $self->get_s3_client->errstr,
        error       => $EVAL_ERROR || 'unknown error',
      }
    );

    return;
  }

  $self->benchmark('s3_time');

  my %result = ( document_id => $document_id );

  my $outfile = sprintf '%s/%s.pdf', dirname($infile), $document_id;

  $self->get_logger->info( Dumper( [ outfile => $outfile, infile => $infile ] ) );

  if ($pdf) {
    my $metadata = $self->doc2pdf(
      document_id => $document_id,
      infile      => $infile,
      outfile     => $outfile
    );

    $self->benchmark('libreoffice_time');

    if ( exists $metadata->{err_file} ) {
      $self->put_object( prefix => $document_id, file => $metadata->{err_file} );
    }
    else {
      $result{pdf} = $metadata;
      $self->put_object( prefix => $document_id, file => $outfile );
      $self->benchmark('s3_time');
    }
  }

  if ($thumb) {
    my $thumb_metadata = $self->create_thumb_nails(
      thumb       => $thumb,
      infile      => $content_type =~ /png|jpe?g/xsm ? $infile : $outfile,
      document_id => $document_id
    );

    $result{thumbs} = $thumb_metadata;
  }

  $self->write_status_file( $document_id, \%result );

  return \%result;
}

########################################################################
sub write_status_file {
########################################################################
  my ( $self, $document_id, $result ) = @_;

  # write status file
  my $dir = tempdir( CLEANUP => $TRUE );

  my $status_file = sprintf '%s/status.json', $dir;

  if ( !$result || $result->{error} || $EVAL_ERROR ) {
    $result->{error} //= $EVAL_ERROR;
  }
  else {
    $result->{conversion_time} = $self->get_benchmark;
  }

  open my $fh, '>', $status_file
    or croak 'could not open ' . $status_file . ' for writing';

  print {$fh} to_json( $result, { pretty => $TRUE } );

  close $fh;

  $self->put_object( prefix => $document_id, file => $status_file );

  return;
}

########################################################################
sub create_thumb_nails {
########################################################################
  my ( $self, %args ) = @_;

  my ( $thumb, $infile, $document_id ) = @args{qw(thumb infile document_id)};

  my @thumb_list = ref $thumb ? @{$thumb} : ($thumb);

  return
    if !-s $infile || !@thumb_list;

  # create thumbs
  my @thumbs;

  foreach my $thumb_size (@thumb_list) {
    push @thumbs, $self->create_preview( size => $thumb_size, infile => $infile );
  }

  $self->benchmark('imagemagick_time');

  $self->get_logger->info( Dumper( [ thumbs => \@thumbs ] ) );

  my @thumbnail_metadata;

  foreach my $thumbnail_file (@thumbs) {
    my ( $name, $path, $ext ) = fileparse( $thumbnail_file, qr/[.][^.]*$/xsm );

    push @thumbnail_metadata,
      {
      tag  => inline_image_tag($thumbnail_file),
      name => "$name$ext",
      size => ( -s $thumbnail_file ),
      s3   => sprintf( 's3://%s/%s/%s%s', $self->get_bucket_name, $document_id, $name, $ext ),
      };

    $self->put_object( prefix => $document_id, file => $thumbnail_file );
  }

  $self->benchmark('s3_time');

  return \@thumbnail_metadata;
}

########################################################################
sub inline_image_tag {
########################################################################
  my ($filename) = @_;

  croak "usage: inline_image_tag(filename)\n"
    if !$filename;

  my $ext = lc $filename;
  $ext =~ s{.*[.]}{}xsm;  # extract file extension

  my %mime_type_for = (
    png  => 'image/png',
    jpg  => 'image/jpeg',
    jpeg => 'image/jpeg',
    gif  => 'image/gif',
    svg  => 'image/svg+xml',
    webp => 'image/webp',
  );

  my $mime = $mime_type_for{$ext};

  croak "unsupported type $ext\n"
    if !$mime;

  local $RS = undef;

  open my $fh, '<', $filename
    or croak "could not open $filename for reading\n";

  my $data = <$fh>;

  close $fh;

  my $b64 = encode_base64( $data, $EMPTY );

  return sprintf '<img src="data:%s;base64,%s" />', $mime, $b64;
}

1;
