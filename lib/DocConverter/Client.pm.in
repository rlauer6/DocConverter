package DocConverter::Client;

use strict;
use warnings;

use Carp;
use Data::Dumper;
use Data::UUID;
use DocConverter::Constants;
use DocConverter::Utils;
use English qw(no_match_vars);
use File::Basename qw(basename);
use JSON;

use Role::Tiny::With;

with 'DocConverter::Role::S3';
with 'DocConverter::Role::SQS';

use parent qw(Class::Accessor::Fast);

__PACKAGE__->follow_best_practice;
__PACKAGE__->mk_accessors(
  qw(
    base_url
    document_id
    endpoint_url
    file
    host
    log_level
    logger
  )
);

########################################################################
sub create_document_id {
########################################################################
  my ($self) = @_;

  my $ug = Data::UUID->new;

  my $uuid = $ug->create();

  $self->set_document_id( $ug->to_string($uuid) );

  return $self->get_document_id;
}

########################################################################
sub get_document_status {
########################################################################
  my ( $self, $document_id ) = @_;

  my $bucket = $self->get_bucket;

  my $status_file = sprintf '%s/status.json', $document_id;

  my $head = $bucket->head_key($status_file);

  return
    if !$head;

  my $status = $bucket->get_key($status_file);

  return $status->{value};
}

########################################################################
sub fetch_metadata {
########################################################################
  my ( $self, $document_id ) = @_;

  my $metadata_file = $self->get_object( $document_id, "$document_id.json" );

  return slurp( $metadata_file, $TRUE );
}

########################################################################
sub wake_up {
########################################################################
  my ($self) = @_;

  return $self->send_message( { action => 'wake-up' } );
}

########################################################################
sub download_file {
########################################################################
  my ( $self, $document_id, $file ) = @_;

  my $metadata = $self->fetch_metadata($document_id);

  $metadata->{tempfile} = $self->get_object( $document_id, "${document_id}.dat" );

  return $metadata;
}

########################################################################
sub upload_file {
########################################################################
  my ( $self, %args ) = @_;

  my ( $file, $action, $metadata, $thumbnails ) = @args{qw(file action metadata thumbnails)};

  my $document_id = $self->create_document_id;
  $metadata->{document_id} = $document_id;

  $self->get_logger->info('uploading file...');
  $self->get_logger->info( sprintf '        file: [%s]', $file );
  $self->get_logger->info( sprintf '      action: [%s]', $action // q{} );
  $self->get_logger->info( sprintf '  thumbnails: [%s]', $thumbnails );
  $self->get_logger->info( sprintf '    filename: [%s]', $metadata->{filename} // q{} );
  $self->get_logger->info( sprintf ' document_id: [%s]', $metadata->{document_id} );

  my $rsp = $self->put_object(
    prefix => $document_id,
    file   => $file,
    name   => "${document_id}.dat"
  );

  croak sprintf "could not upload %s/%s: %s\n", $document_id, $file, $self->get_s3_client->errstr
    if !$rsp;

  $self->put_object(
    prefix  => $document_id,
    name    => "${document_id}.json",
    content => to_json($metadata)
  );

  my $message = {
    document_id => $document_id,
    bucket_name => $self->get_bucket_name,
    action      => $action,
    thumbnails  => $thumbnails,
  };

  $self->get_logger->info( sprintf 'sending message...%s', $message );

  $self->send_message($message);

  return $document_id;
}

########################################################################
sub new {
########################################################################
  my ( $class, @args ) = @_;

  my $options = ref $args[0] ? $args[0] : {@args};

  $options->{host}     //= $DEFAULT_HOST;
  $options->{base_url} //= $DEFAULT_BASE_URL;

  my $no_logger = delete $options->{no_logger};

  # check required arguments
  foreach (qw(bucket_name queue_url)) {
    next if exists $options->{$_};
    croak "$_ is a required argument\n";
  }

  my $self = $class->SUPER::new($options);

  $self->init_s3_client();
  $self->init_sqs_client();

  if ( !$no_logger ) {
    my $logger = eval {
      my $log_level = $self->get_log_level;
      return init_logger($log_level);
    };

    if ( $logger || $EVAL_ERROR ) {
      print {*STDERR} "WARN: could not initiate logger object: %s\n", $EVAL_ERROR;
    }

    $self->set_logger($logger);
  }

  return $self;
}

1;
